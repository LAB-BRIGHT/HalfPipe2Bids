---
on:
  push:
    branches:
    - main
    - maint/*
    tags:
    - '*'
  pull_request:
    branches:
    - main
    - maint/*
    paths: ['halfpipe2bids/*', 'pyproject.toml']

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  check_skip_flags:
    name: Check skip flags
    runs-on: ubuntu-latest
    outputs:
      head-commit-message: ${{ steps.get_head_commit_message.outputs.headCommitMsg }}
    steps:
      - name: Get repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "headCommitMsg=$(git show -s --format=%s)" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: 3
    - run: pip install --upgrade build twine
    - name: Build sdist and wheel
      run: python -m build
    - run: twine check dist/*
    - name: Upload sdist and wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
    - name: Build git archive
      run: mkdir archive && git archive -v -o archive/archive.tgz HEAD
    - name: Upload git archive artifact
      uses: actions/upload-artifact@v4
      with:
        name: archive
        path: archive/

  test-package:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        package: [wheel, sdist, archive]
    steps:
    - name: Download sdist and wheel artifacts
      if: matrix.package != 'archive'
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    - name: Download git archive artifact
      if: matrix.package == 'archive'
      uses: actions/download-artifact@v4
      with:
        name: archive
        path: archive/
    - uses: actions/setup-python@v5
      with:
        python-version: 3
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Update pip
      run: pip install --upgrade pip
    - name: Install wheel
      if: matrix.package == 'wheel'
      run: pip install dist/*.whl
    - name: Install sdist
      if: matrix.package == 'sdist'
      run: pip install dist/*.tar.gz
    - name: Install archive
      if: matrix.package == 'archive'
      env:
        # added temp fallback version to avoid VCS errors for archive installs
        HATCH_VCS_FALLBACK_VERSION: 0.0.0+ci
        SETUPTOOLS_SCM_PRETEND_VERSION: 0.0.0+ci
      run: pip install archive/archive.tgz

  test-coverage:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true

    - name: Install build dependencies
      run: python -m pip install --upgrade pip
    - name: Install task package
      run: pip install -e .[test]

    - name: Test with pytest - ignore smoke test.
      if: ${{ !contains(needs.check_skip_flags.outputs.head-commit-message, 'full_test') }}
      run: |
        pytest -m "not smoke" --cov=halfpipe2bids --cov-report=xml

    - name: Full test - run all the test to generate accurate coverage report.
      if: ${{ contains(needs.check_skip_flags.outputs.head-commit-message, 'full_test') }} || ${{ github.event.pull_request.merged }}
      run: pytest --cov=halfpipe2bids --cov-report=xml

    # - uses: codecov/codecov-action@v5
    #   if: ${{ always() }}
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
